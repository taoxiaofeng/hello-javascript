/**
 * 常见的数据结构包括：
 * 1、数组（Array）：一组按顺序存储的数据集合，可以通过下标访问其中的元素。
 * 2、链表（Linked List）：一组通过指针相连的节点，每个节点包含数据和指向下一个节点的指针。
 * 3、栈（Stack）：一种后进先出（LIFO）的数据结构，只允许在栈顶进行插入和删除操作。
 * 4、队列（Queue）：一种先进先出（FIFO）的数据结构，只允许在队尾插入元素，在队头删除元素。
 * 5、树（Tree）：一种非线性的数据结构，由节点和边组成，每个节点可以有多个子节点。
 * 6、图（Graph）：一种非线性的数据结构，由节点和边组成，每个节点可以有多个相邻节点。
 * 常见的算法包括：
 * 1、排序算法：冒泡排序、选择排序、插入排序、快速排序、归并排序等。
 * 2、查找算法：线性查找、二分查找、哈希查找等。
 * 3、字符串匹配算法：暴力匹配、KMP 算法、Boyer-Moore 算法等。
 * 4、图算法：深度优先搜索、广度优先搜索、最短路径算法、最小生成树算法等。
 * 5、动态规划算法：背包问题、最长公共子序列、最长递增子序列等。
 * 6、贪心算法：背包问题、最小生成树、活动安排等。
 * 以上只是常见的数据结构和算法，实际上还有很多其他的数据结构和算法，不同的应用场景需要选择不同的数据结构和算法来解决问题。
 */

/**
 * 常见算法示例 - 冒泡排序
 */
function bubbleSort(array) {
  const { length } = array;

  // 冒泡排序核心实现讲解：
  // 1、外层循环控制循环次数，每次循环都会找出一个最大值，所以循环次数为数组长度减一。
  // 2、内层循环控制比较次数，每次循环都会比较相邻两个元素的大小，如果前一个元素大于后一个元素，则交换两个元素的位置。
  // 3、内层循环每循环一次，就会确定一个最大值，所以比较次数为数组长度减一减外层循环的次数。
  for (let i = 0; i < length - 1; i++) {
    for (let j = 0; j < length - i - 1; j++) {
      const element = array[j];
      if (array[j] > array[j + 1]) {
        [array[j], array[j + 1]] = [array[j + 1], array[j]];
      }
    }
  }
  return array;
}

console.log(bubbleSort([7,4,2,6,1,3,5,9,8,0]));